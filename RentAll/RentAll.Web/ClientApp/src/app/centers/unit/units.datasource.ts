import {CollectionViewer, DataSource} from "@angular/cdk/collections";
import { BehaviorSubject } from "rxjs";
import { of } from "rxjs";
import { Observable } from "rxjs";
import { catchError, finalize } from "rxjs/operators";
import { CenterClient, GetUnitDto } from "src/app/autogenerated/api";

export class UnitsDataSource implements DataSource<GetUnitDto> {

    private unitsSubject = new BehaviorSubject<GetUnitDto[]>([]);
    private loadingSubject = new BehaviorSubject<boolean>(false);

    public loading$ = this.loadingSubject.asObservable();


    constructor(private centerClient: CenterClient) {}

    connect(collectionViewer: CollectionViewer): Observable<GetUnitDto[]> {
      return this.unitsSubject.asObservable();
    }

    disconnect(collectionViewer: CollectionViewer): void {
      this.unitsSubject.complete();
      this.loadingSubject.complete();
    }
  
    loadLessons(id: number) {
      
      this.loadingSubject.next(true);

        this.centerClient.listUnitsInCenter(id).pipe(
            catchError(() => of([])),
            finalize(() => this.loadingSubject.next(false))
        )
        .subscribe(units => this.unitsSubject.next(units));
    }  
}