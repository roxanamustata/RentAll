import { Component, OnInit, ViewChild } from "@angular/core";
import {
  CenterClient,
  GetCenterDto,
  GetLeaseDto,
} from "src/app/autogenerated/api";
import { GetUnitDto } from "src/app/autogenerated/api";
import { ActivatedRoute, Router } from "@angular/router";
import { UnitsDataSource } from "./units.datasource";
import {
  MatDialog,
  MatPaginator,
  MatSort,
  MatTableDataSource,
} from "@angular/material";
import { LeaseViewComponent } from "src/app/leases/lease-view/lease-view.component";

@Component({
  selector: "app-unit",
  templateUrl: "./unit.component.html",
  styleUrls: ["./unit.component.css"],
})
export class UnitComponent implements OnInit {
  // dataSource: UnitsDataSource;
  dataSource: MatTableDataSource<GetUnitDto>;
  units: GetUnitDto[];
  center: GetCenterDto;
  displayedColumns = [
    "id",
    "unitCode",
    "area",
    "floor",
    "type",
    "monthlyRentSqm",
    "monthlyMaintenanceCostSqm",
    "monthlyMarketingFeeSqm",
    // "leaseNumber",
    "actions",

    "lease",
  ];
  id: number;
  unitId: number;
  unit: GetUnitDto;
  lease: GetLeaseDto;

  @ViewChild(MatSort, { static: true }) sort: MatSort;
  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;

  constructor(
    private readonly centerClient: CenterClient,
    private route: ActivatedRoute,
    private router: Router,
    public dialog: MatDialog
  ) {}

  ngOnInit() {
    this.id = parseInt(this.route.snapshot.paramMap.get("id"));

    this.centerClient
      .getCenterById(this.id)
      .subscribe((data) => (this.center = data));

    // this.dataSource = new UnitsDataSource(this.centerClient);
    // this.dataSource.loadUnits(this.id);

    this.centerClient.listUnitsInCenter(this.id).subscribe((result) => {
      this.units = result;
      this.dataSource = new MatTableDataSource(this.units);
      this.dataSource.paginator = this.paginator;
      this.dataSource.sort = this.sort;
    });
  }

  openDialog(unitId: number): void {
    this.centerClient.getValidLeaseByUnitId(unitId).subscribe((data) => {
      this.lease = data;
      const dialogRef = this.dialog.open(LeaseViewComponent, {
        width: "250px",
        data: this.lease,
      });
      dialogRef.afterClosed().subscribe((result) => {
        console.log(`Dialog result: ${result}`);
      });
    });
  }

  deleteUnit(centerId: number, unitId: number) {
 if (this.centerClient.getValidLeaseByUnitId(unitId)!=null){
    
    this.centerClient.deleteUnitById(centerId, unitId).subscribe();
    this.refreshPage();


 } else{

window.alert("Unit has a valid lease, can not be deleted!")

 }
  }

  refreshPage() {
    window.location.reload();
  }

  onRowClicked(row) {
    console.log("Row clicked: ", row);
  }

  applyFilter(event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
    this.paginator.firstPage();
  }
}
