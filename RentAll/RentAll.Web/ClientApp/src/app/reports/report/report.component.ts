import { Component, OnInit, ViewChild } from "@angular/core";
import { MatDialog, MatPaginator, MatSort, MatTableDataSource } from "@angular/material";
import { CenterClient, CenterReportDto, GetCenterDto } from "src/app/autogenerated/api";



import {
  ChartComponent,
  ApexAxisChartSeries,
  ApexChart,
  ApexXAxis,
  ApexTitleSubtitle,


  ApexNonAxisChartSeries,
  ApexResponsive,

} from "ng-apexcharts";

export type ChartOptions = {
  series: ApexNonAxisChartSeries;
  chart: ApexChart;
  responsive: ApexResponsive[];
  labels: any;



};

interface CenterReportDtoExtended extends CenterReportDto {
  chartOptions: Partial<ChartOptions>;
}


@Component({
  selector: "app-report",
  templateUrl: "./report.component.html",
  styleUrls: ["./report.component.css"],
})
export class ReportComponent implements OnInit {

  // @ViewChild("chart", { static: true }) chart: ChartComponent;
  public chartOptions: Partial<ChartOptions>;

  dataSource: MatTableDataSource<CenterReportDto>;
  reports: CenterReportDtoExtended[];

  displayedColumns = [
    "centerId",
    "centerName",
    "leasableArea",
    "leasedArea",
    "occupancyDegree",
    "averageRent",
    "totalRentIncome",
    "averageRentOnNonFood",
    "averageRentOnFood",
    "averageRentEntertainment",
    "averageRentOnServices",
    "chart",

  ];


  @ViewChild(MatSort, { static: true }) sort: MatSort;
  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;

  constructor(
    private readonly centerClient: CenterClient,

  ) {


  }

  ngOnInit() {
    this.reports = [];
    this.centerClient.getCentersReports().subscribe((result) => {

      result.forEach(report => {
        var extendedReport: CenterReportDtoExtended = report as CenterReportDtoExtended;
        extendedReport.averageRent = isNaN(report.averageRent) ? 0 : report.averageRent;
        extendedReport.averageRentOnNonFood = isNaN(report.averageRentOnNonFood) ? 0 : report.averageRentOnNonFood;
        extendedReport.averageRentOnFood = isNaN(report.averageRentOnFood) ? 0 : report.averageRentOnFood;
        extendedReport.averageRentEntertainment = isNaN(report.averageRentEntertainment) ? 0 : report.averageRentEntertainment;
        extendedReport.averageRentOnServices = isNaN(report.averageRentOnServices) ? 0 : report.averageRentOnServices;

        extendedReport.occupancyDegree = isNaN(report.occupancyDegree) ? 0 : report.occupancyDegree;
        extendedReport.chartOptions = {
          series: [report.totalRentIncomeOnNonFood,
          report.totalRentIncomeOnFood,
          report.totalRentIncomeOnEntertainment,
          report.totalRentIncomeOnServices],
          chart: {
            width: 280,
            type: "pie"
          },
          labels: ["Non Food", "Food", "Entertainment", "Services"],

          responsive: [
            {
              breakpoint: 480,
              options: {
                chart: {
                  width: 200
                },
                legend: {
                  position: "bottom"
                }
              }
            }
          ]
        }
        this.reports.push(extendedReport);

      }
      )


      this.dataSource = new MatTableDataSource(this.reports);
      this.dataSource.paginator = this.paginator;
      this.dataSource.sort = this.sort;
    });
  }


  isEmpty(array: Array<number>): boolean {
    return array.every(x => x === 0);
  }

  refreshPage() {
    window.location.reload();
  }

  onRowClicked(row) {
    console.log("Row clicked: ", row);
  }

  applyFilter(event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
    this.paginator.firstPage();
  }
}