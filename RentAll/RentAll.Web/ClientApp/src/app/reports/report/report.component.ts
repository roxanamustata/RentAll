import { Component, OnInit, ViewChild } from "@angular/core";
import { FormBuilder, Validators } from "@angular/forms";
import { MatDialog } from "@angular/material";
import { ActivatedRoute, Router } from "@angular/router";
import { CenterClient, CenterReportDto, GetCenterDto } from "src/app/autogenerated/api";
import { CenterReportComponent } from "../center-report/center-report.component";

import {
  ChartComponent,
  ApexAxisChartSeries,
  ApexChart,
  ApexXAxis,
  ApexTitleSubtitle,


  ApexNonAxisChartSeries,
  ApexResponsive,

} from "ng-apexcharts";

export type ChartOptions = {
  series: ApexNonAxisChartSeries;
  chart: ApexChart;
  responsive: ApexResponsive[];
  labels: any;



};



@Component({
  selector: "app-report",
  templateUrl: "./report.component.html",
  styleUrls: ["./report.component.css"],
})
export class ReportComponent implements OnInit {

  // @ViewChild("chart", { static: true }) chart: ChartComponent;
  public chartOptions: Partial<ChartOptions>;

  id: number;
  
  centerReport: CenterReportDto;
  
//   {
//     [key: string]: number;
// }; 

  constructor(
    private centerClient: CenterClient,
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    public dialog: MatDialog,
    
  ) {
    this.chartOptions = {
      series: [44, 55, 13, 43, 22],
      chart: {
        width: 380,
        type: "pie"
      },
      labels: ["Team A", "Team B", "Team C", "Team D", "Team E"],
      responsive: [
        {
          breakpoint: 480,
          options: {
            chart: {
              width: 200
            },
            legend: {
              position: "bottom"
            }
          }
        }
      ]
    };
  }

  

  centerOptions$ = this.centerClient.listCenters();
  form = this.fb.group({
    centerId: ["", Validators.required],
  });

  get centerId() {
    return this.form.get('centerId');
  }



  ngOnInit() {

    // this.id=parseInt(this.route.snapshot.paramMap.get("id"));
    // this.centerClient.getCenterById(this.id).subscribe(data=>this.selectedCenter$=data);
  
  
  }

  openDialog(id: number): void {
  
    this.centerClient.getCenterSummary(id).subscribe((data) => {
      this.centerReport = data;
      const dialogRef = this.dialog.open(CenterReportComponent, {
        width: "250px",
        data: this.centerReport,
      });
      dialogRef.afterClosed().subscribe((result) => {
        console.log(`Dialog result: ${result}`);
      });
    });
  }
}
