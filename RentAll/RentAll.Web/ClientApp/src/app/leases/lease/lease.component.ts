import { Component, OnInit, ViewChild } from "@angular/core";
import { FormControl } from "@angular/forms";
import { MatPaginator, MatSort, MatTableDataSource } from "@angular/material";
import { ActivatedRoute, Router } from "@angular/router";
import {
  CenterClient,
  GetCenterDto,
  GetLeaseDto,
} from "src/app/autogenerated/api";
import { UnitsDataSource } from "src/app/centers/unit/units.datasource";
import { LeasesDataSource } from "./leases.datasource";

@Component({
  selector: "app-lease",
  templateUrl: "./lease.component.html",
  styleUrls: ["./lease.component.css"],
})
export class LeaseComponent implements OnInit {
  // dataSource: LeasesDataSource;
  dataSource: MatTableDataSource<GetLeaseDto>;
  leases: GetLeaseDto[];

  center: GetCenterDto;
  displayedColumns = [
    "leaseNumber",
    "tenant",
    "signingDate",
    "startDate",
    "termInMonths",
    "endDate",
    "valid",
    "activity",
    "center",
    "actions",
  ];
  id: number;
  //  leaseId:number;

  @ViewChild(MatSort, { static: true }) sort: MatSort;
  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;

  constructor(
    private readonly centerClient: CenterClient,
    private route: ActivatedRoute,
    private router: Router
  ) { }

  ngOnInit() {


    if (this.route.snapshot.paramMap.get("id") != null) {
      this.id = parseInt(this.route.snapshot.paramMap.get("id"));

      this.centerClient
        .getCenterById(this.id)
        .subscribe((data) => (this.center = data));



      this.centerClient.listLeasesInCenter(this.id).subscribe((result) => {
        this.leases = result;
        this.dataSource = new MatTableDataSource(this.leases);
        this.dataSource.paginator = this.paginator;
        this.dataSource.sort = this.sort;
      });
    } else {


      this.centerClient.listAllLeases().subscribe((result) => {
        this.leases = result;
        this.dataSource = new MatTableDataSource(this.leases);
        this.dataSource.paginator = this.paginator;
        this.dataSource.sort = this.sort;
      });
    }
  }

  onRowClicked(row) {
    console.log("Row clicked: ", row);
  }

  refreshPage() {
    window.location.reload();
  }

  deleteLease(centerId: number, leaseId: number) {
    this.centerClient.deleteLeaseById(centerId, leaseId).subscribe();
    this.refreshPage();
  }

  applyFilter(event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
    this.paginator.firstPage();
  }
}
