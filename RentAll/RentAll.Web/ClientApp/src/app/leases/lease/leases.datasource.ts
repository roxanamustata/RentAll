import {CollectionViewer, DataSource} from "@angular/cdk/collections";
import { BehaviorSubject } from "rxjs";
import { of } from "rxjs";
import { Observable } from "rxjs";
import { catchError, finalize } from "rxjs/operators";
import { CenterClient, GetLeaseDto } from "src/app/autogenerated/api";

export class LeasesDataSource implements DataSource<GetLeaseDto> {

    private leasesSubject = new BehaviorSubject<GetLeaseDto[]>([]);
    private loadingSubject = new BehaviorSubject<boolean>(false);

    public loading$ = this.loadingSubject.asObservable();


    constructor(private centerClient: CenterClient) {}

    connect(collectionViewer: CollectionViewer): Observable<GetLeaseDto[]> {
      return this.leasesSubject.asObservable();
    }

    disconnect(collectionViewer: CollectionViewer): void {
      this.leasesSubject.complete();
      this.loadingSubject.complete();
    }
  
    loadLeasesInCenter(id: number) {
      
      this.loadingSubject.next(true);

        this.centerClient.listLeasesInCenter(id).pipe(
            catchError(() => of([])),
            finalize(() => this.loadingSubject.next(false))
        )
        .subscribe(leases => this.leasesSubject.next(leases));
    } 

    loadLeases() {
      
      this.loadingSubject.next(true);

        this.centerClient.listAllLeases().pipe(
            catchError(() => of([])),
            finalize(() => this.loadingSubject.next(false))
        )
        .subscribe(leases => this.leasesSubject.next(leases));
    } 


}